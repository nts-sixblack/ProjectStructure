## Note: all of the config entries below are just examples with placeholders. Be sure to edit and adjust to your needs when uncommenting.

## swiftgen config init // Create swiftgen config file
## swiftgen config lint // Validate config file
## swiftgen config run / swiftgen // Generate code from config file

## In case your config entries all use a common input/output parent directory, you can specify those here.
##   Every input/output paths in the rest of the config will then be expressed relative to these.
##   Those two top-level keys are optional and default to "." (the directory of the config file).
 input_dir: ProjectStructure/Resources/
 output_dir: ProjectStructure/Sources/Generated/


## Generate constants for your localized strings.
##   Be sure that SwiftGen only parses ONE locale (typically Base.lproj, or en.lproj, or whichever your development region is); otherwise it will generate the same keys multiple times.
##   SwiftGen will parse all `.strings` files found in that folder.
# strings:
#   inputs:
#     - Resources/Base.lproj
#   outputs:
#     - templateName: structured-swift5
#       output: Strings+Generated.swift


## Generate constants for your Assets Catalogs, including constants for images, colors, ARKit resources, etc.
##   This example also shows how to provide additional parameters to your template to customize the output.
##   - Especially the `forceProvidesNamespaces: true` param forces to create sub-namespace for each folder/group used in your Asset Catalogs, even the ones without "Provides Namespace". Without this param, SwiftGen only generates sub-namespaces for folders/groups which have the "Provides Namespace" box checked in the Inspector pane.
##   - To know which params are supported for a template, use `swiftgen template doc xcassets swift5` to open the template documentation on GitHub.
 xcassets:
   inputs:
     - Assets/Assets.xcassets
     - Assets/Color.xcassets
     - Assets/Icon.xcassets
     - Assets/Image.xcassets
   outputs:
     - templateName: swift5
       params:
         forceProvidesNamespaces: true
       output: XCAssets+Generated.swift

 fonts:
   inputs:
     - Fonts/Roboto-Black.ttf
     - Fonts/Roboto-BlackItalic.ttf
     - Fonts/Roboto-Bold.ttf
     - Fonts/Roboto-BoldItalic.ttf
     - Fonts/Roboto-ExtraBold.ttf
     - Fonts/Roboto-ExtraBoldItalic.ttf
     - Fonts/Roboto-ExtraLight.ttf
     - Fonts/Roboto-ExtraLightItalic.ttf
     - Fonts/Roboto-Italic.ttf
     - Fonts/Roboto-Light.ttf
     - Fonts/Roboto-LightItalic.ttf
     - Fonts/Roboto-Medium.ttf
     - Fonts/Roboto-MediumItalic.ttf
     - Fonts/Roboto-Regular.ttf
     - Fonts/Roboto-SemiBold.ttf
     - Fonts/Roboto-SemiBoldItalic.ttf
     - Fonts/Roboto-Thin.ttf
     - Fonts/Roboto-ThinItalic.ttf
   outputs:
     - templateName: swift5
       output: Fonts+Generated.swift


## For more info, use `swiftgen config doc` to open the full documentation on GitHub.
## https://github.com/SwiftGen/SwiftGen/tree/6.6.3/Documentation/
